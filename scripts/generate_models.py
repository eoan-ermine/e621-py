import io
import json
import re
from contextlib import redirect_stdout
from pathlib import Path
from tempfile import TemporaryDirectory
from typing import List, Union

import typer
from datamodel_code_generator.__main__ import main as codegen

import e621
from e621.api import E621API

app = typer.Typer(add_completion=False)
MODELS_FILE = Path(e621.__file__).parent / "autogenerated_models.py"
# We omit favorites because favorites has the same return type as posts
API_ENDPOINTS = "posts", "post_flags", "tags", "tag_aliases", "notes", "pools"
# The ^ and MULTILINE here are needed because we don't want to match inner classes
RE_CLASS = re.compile(r"(^class \w+\()", flags=re.MULTILINE)
RE_CLASSNAME = re.compile(r"^class (\w+)\(", flags=re.MULTILINE)
MODELS_PREFIX = """# This file has been automagically generated by our scripts
# Please, do not edit it by hand because all of your changes
# will inevitably be overwritten. Edit models.py instead.

from __future__ import annotations
from typing import Any, Dict, List, Optional
from .base_model import BaseModel
from pydantic import Field


"""


def normalize_models(raw_models: str) -> List[str]:
    raw_models = raw_models[raw_models.index("class") :]
    splitted_models = RE_CLASS.split(raw_models)[1:]
    models = ((splitted_models[i] + splitted_models[i + 1]).strip() for i in range(0, len(splitted_models), 2))
    models = [model for model in models if "__root__: " not in model]
    return models


@app.command()
def main(
    username: str = typer.Option(..., prompt=True),
    api_key: str = typer.Option(..., prompt=True),
):
    e6api = E621API((username, api_key))
    api_endpoint_models = []
    with TemporaryDirectory("e621-model-generator") as tempdir:
        tempdir = Path(tempdir)
        for endpoint in API_ENDPOINTS:
            json_template = e6api.session.get(endpoint, {"limit": 200}).json()
            endpoint_json = (tempdir / endpoint).with_suffix(".json")
            endpoint_json.write_text(json.dumps(json_template, ensure_ascii=False))
            with io.StringIO() as temp_stdout, redirect_stdout(temp_stdout):
                codegen(
                    [
                        "--input",
                        str(endpoint_json),
                        "--input-file-type",
                        "json",
                        "--reuse-model",
                        "--class-name",
                        endpoint.replace("_", " ").title().replace(" ", ""),
                    ]
                )
                api_endpoint_models.extend(normalize_models(temp_stdout.getvalue()))

    final_models_source = "\n\n\n".join(api_endpoint_models).replace("class TagAliase(", "class TagAlias(") + "\n"
    model_class_names = [repr(n) for n in RE_CLASSNAME.findall(final_models_source)]
    all_list = f"__all__ = {', '.join(model_class_names)}\n\n\n"
    final_models_source = MODELS_PREFIX + all_list + final_models_source
    MODELS_FILE.write_text(final_models_source)


if __name__ == "__main__":
    app()
